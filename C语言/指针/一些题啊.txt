

#include <stdio.h>
#define N 20
int main ()
{
	char a;
	int x[N],b,i=0,sum=0,t=1,j,flag=1,val;
	scanf("%c",&a);
	scanf("%d",&b);
	val=b;
	while(val)
	{
		if(val%10==0 || val%10==1)
			val/=10;
		else{
			flag=0;
			break;}
	}
	
		if(a=='=')
		{
			if(flag){	
				while(b)
				{
					sum += b%10*t;
					b/=10;
					t*=2;
				}
				printf("%d",sum);}
		}
	
		if(a=='+')
		{
		
			while(b)
			{
				x[i++]=b%2;
				b/=2;
			}
			for(j=i-1; j>=0; j--)
				printf("%d",x[j]);
		}
	
	return 0;
}

/*
#include <stdio.h>
#define N 1000
int main()
{
	int n,a,i,x[N];
	scanf("%d",&n);
	for(i=0; i<n; i++)
		scanf("%d",&x[i]);
	scanf("%d",&a);
	for(i=0; i<n; i++)
		if(x[i]==a)
			break;
	if(i==n)
		printf("-1\n");
	else
		printf("%d\n",i+1);
	return 0;
}

*/

/*   2021.3.17
   在一行中输出n以内有多少完全平方数（包括n但不包括0）
   #include <stdio.h>
#include <math.h>
int prime(double x); 
int main ()
{

	int i,n,count=0;
	scanf("%d",&n);
	for (i=1; i<=n; i++)
		if( prime( sqrt (double（i） )) )
			count++;
	printf("%d\n",count);
	return 0;
}
int prime(double x)
{
	int a ,b;
	a = (int)x;
	b = (int)(x+0.999999);
		if(a==b)
			return 1;
		else
			return 0;
}


#include <stdio.h>

int prime(int x)   //判断是否为完全开方数，当n 较大时，编译速度慢
{
  int i;
  for(i=1; x>0; i+=2)
   x-=i;
  return 0==x;
}
int main ()
{
	int i,count=0,n,m;
	scanf("%d",&n);

	for(i=1; i<=n; i++)
		if(prime(i))
          count++;
	printf("%d\n",count);
	return 0;
}
编译超时

*/



/*     2021.3.16
输入三个自然数N，i，j （1<=i<=N，1<=j<=N），输出在一个N*N格的棋盘中，与格子（i，j）同行、同列、同一对角线的所有格子的位置

#include<stdio.h>
#define K 24
int main ()
{
	int a[K][K],m,n,i,j,N;
	scanf("%d%d%d",&N,&i,&j);
		for(n=1;n<=N;n++)
			printf("(%d,%d)",i,n);
		printf("\n");
	for(m=1;m<=N;m++)
		printf("(%d,%d)",m,j);
	printf("\n");
	for(m=1; m<=N; m++)						//后一个角标-前一个角标=j-i
		for(n=1; n<=N; n++)
			if(n-m==j-i)
				printf("(%d,%d)",m,n);
	printf("\n");
	for(m=N; m>=1; m--)						//角标相加=i+j      即对角线
		for(n=N; n>=1; n--)
			if(n+m==j+i)
				printf("(%d,%d)",m,n);
	printf("\n");
	return 0;
}
*/





/*
#include<stdio.h>
#include<string.h>
#define MAXNUMBER 105
#define MAXPEOPLE 10050
int count[MAXNUMBER];
int time[MAXPEOPLE];
int mini(int number)
{
	int flag=0,i;
	for(i=1;i<number;i++)
	{
		if(count[flag]>count[i])
		{
			flag=i;
		}
	}
	return flag;
}
void fun(int people,int number)
{
	int i,k=0,flag;
	for(i=0;i<people;i++)
	{
		flag=mini(number);
//		printf("选中的水龙头：%10d 有水：%10d 要装：%10d ",flag,count[flag],time[i]);
		count[flag]+=time[i];
//		printf("装水后：%10d\n",count[flag]);
	}
}
int main()
{
	int people,number,max,i;
	memset(count,0,sizeof(count));
//	printf("请输入人数和水龙头数：\n");
	scanf("%d%d",&people,&number);
//	printf("请输入%d个人接水的时间：\n",people);
	for(i=0;i<people;i++)
	{
		scanf("%d",&time[i]);
	}
	fun(people,number);
	max=count[0];
	for(i=1;i<number;i++)
	{
		if(max<count[i])
		{
			max=count[i];
		}
	}
//	printf("总共花费时间：");
	printf("%d\n",max);
	return 0;

}
*/
/*


//题目描述：输入一个单词，假设maxn是单词中出现字母的次数，minn是单词中出现次数最少的字母的次数，如果maxn-minn是一个
质数，那么笨小猴就认为这是一个“lucky Word”，else为“No answer”。
#include <stdio.h>
#include <string.h>
int prime(int n)			//编写一个函数，判断是否为质数
{
	int i,flag=1;
	if(n<=1)				//要注意1和0不是质数，必须先排除
		flag=0;
	for (i=2; i<n; i++)
		if(n%i==0){
			flag=0;
			break;}
	return flag;
}
int find(char b)			
//查找字母函数，为每个小写字母编号（即从0-25），每判断一个字符，
  与字符串中的字母进行比较，即查找该字母，若找到，则返回该字母所对应的编号
{
	int i;
	char str[26];
	for (i=1,str[0]='a'; i<26; i++)
		str[i] = str[i-1]+1;
	for (i=0; i<26; i++)
		if (b==str[i])
			return i;
}
int main ()
{
	int maxn,minn,i,j;
	char a[100];
	int s[26]={};						//要初始值为0
	scanf("%s",a);
	for(i=0; i<strlen(a); i++)			//find（a[i]）为编号，s[]++代表每找到一个字符，对应字符个数加一
		s[find(a[i])]++;
	for (i=0; i<26; i++)			//由于考虑到有些字符没有出现过，所以次数最小的总为0，不符合题意，因此先排去个数为0的
		if(s[i]!=0)
			maxn=minn=s[i];
	for(j=0; j<26; j++)
		if(s[j]!=0)					//保证最小值不为0
		{
			if(maxn<s[j])
				maxn=s[j];
			if(minn>s[j])
				minn=s[j];
		}
	if(prime(maxn-minn)){
		printf("Lucky Word\n");
		printf("%d\n",maxn-minn);}
	else
		{printf("No Answer\n");
			printf("0\n");}
  return 0;
}
*/

/*
#include<stdio.h>
int main()
	{
		long int n,copy;
		int k=1;
		scanf("%ld",&n);
		if(n<0)  //实现负数输出 
			{
			n=-n;
			printf("fu ");
			}
		copy=n;
		while(copy>9)
		{
			k*=10;  //用k 表示数据位数 
			copy/=10;
		}
	
		while (k>9)
		{
			copy = n/k;     //从最高位开始取
			n%=k;			
			k/=10;
		
		
			switch (copy)
			{
				case 0:printf("ling ");break;
				case 1:printf("yi ");break;
				case 2:printf("er ");break;
				case 3:printf("san ");break;
				case 4:printf("si ");break;
				case 5:printf("wu ");break;
				case 6:printf("liu ");break;
				case 7:printf("qi ");break;
				case 8:printf("ba ");break;
				default:printf("jiu ");
				
			}
			
		}
		switch (n)
			{
				case 0:printf("ling");break;
				case 1:printf("yi");break;
				case 2:printf("er");break;
				case 3:printf("san");break;
				case 4:printf("si");break;
				case 5:printf("wu");break;
				case 6:printf("liu");break;
				case 7:printf("qi");break;
				case 8:printf("ba");break;
				default:printf("jiu");
				
			}
		return 0;
} 
*/
/*
#include <stdio.h>

int main ()
{
  int n,t=1,copy,i;
  scanf("%d",&n);
  if (n<0)
  {
	  printf("fu ");
	  n = -n;
  }
	copy = n;
	while(copy>9)
	{
		t *=10;			//用t来表示数据的位数
		copy/=10;
	}
  while(n>10)
  {
	  i = n/t;
	  switch(i)
	  {
			case 0:printf("ling ");break;
			case 1:printf("yi ");break;
			case 2:printf("er ");break;
			case 3:printf("san ");break;
			case 4:printf("si ");break;
			case 5:printf("wu ");break;
			case 6:printf("liu ");break;
			case 7:printf("qi ");break;
			case 8:printf("ba ");break;
			case 9:printf("jiu ");break;
	  }
	  n=n%t;
	  t/=10;
	  
  }
  switch (n)
  {
		case 0:printf("ling");break;
		case 1:printf("yi");break;
		case 2:printf("er");break;
		case 3:printf("san");break;
		case 4:printf("si");break;
		case 5:printf("wu");break;
		case 6:printf("liu");break;
		case 7:printf("qi");break;
		case 8:printf("ba");break;
		case 9:printf("jiu");break;

  }

  return 0;
}*/


/*
#include <stdio.h>
#include <stdlib.h>
typedef struct{
				int max,min;
				}Data;

int MIN;

int fun1(int a[],int n)
{
	int i,max;
	max = MIN = a[0];
	for (i=0; i<n; i++){
		if (a[i]>max) max = a[i];
		if (a[i]<MIN) MIN = a[i];
	}
	return (max);
}

int *fun2 (int a[],int n)
	//将最大最小值放在数组b 中，通过return返回
{
	static int b[2];
	b[0] = b[1] = a[0];
	int i;
	for (i=1; i<n; i++)
	{
		if (a[i] > b[0])
			b[0] = a[i];
		if (a[i] < b[1])
			b[1] = a[i];
	}
	return (b);
}

Data *fun3 (int a[], int n)
	//将最大最小值放到结构体中，通过return返回结构体指针p中
{
	Data * p;
	int i;p = (Data *)malloc(sizeof(Data));
	p->max = p->min = a[0];
	for(i=0; i<n; i++)
	{
		if (a[i] > p->max )
			p->max = a[i];
		if (a[i] < p->min)
			p->min = a[i];
	}
	return (p);
}
Data fun
	*/


/*
#include <stdio.h>

typedef struct{
				float realpart;
				float imagpart;
				}Complex;

Complex create (float x, float y);
Complex add(Complex z1,Complex z2);

Complex create(float x, float y)
{
	Complex z;
	z.realpart  = x;
	z.imagpart  = y;
	return (z);
}

Complex add(Complex z1, Complex z2)
{
	Complex  sum;
	sum.realpart = z1.realpart + z2.realpart;
	sum.imagpart = z1.imagpart + z2.imagpart ;
	return (sum);
}
void main ()
{
	float a,b;
	Complex c1,c2,c3;
	printf("\n\n\n Input realpart and imagpart : ");
	scanf ("%f%f ",&a,&b);
	c1 = create(a,b);
	printf("\n\n\n Input realpart and imagpart : ");
	scanf ("%f%f ",&a,&b);
	c2 = create(a,b);
	c3 = add(c1,c2);
	printf("\n\n  c1 == %.2f + %.2fi",c1.realpart ,c1.imagpart );
	printf("\n\n  c1 == %.2f + %.2fi",c2.realpart ,c2.imagpart );
	printf("\n\n  c3 == c1 + c2 == %.2f + %.2fi\n",c3.realpart ,c3.imagpart );
}
*/
//为什么为提示输入三个数呢？